#!/bin/bash
#
# List recently blocked dom0 USB devices for conky.
#
# If you use `usbguard, this can be used as such in your custom conky
# config (make sure the log file is readable by conky):
# ```
# ${execpi 60 ./usbguard_conky "/var/log/usbguard.log" 12}
# ```
#
# Copyright (C) 2022  David Hobach  GPLv3
# version: 1.0
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# 

function error {
  echo '${color red}ERROR: '"$1"'${color}'
  exit 1
}

function usage {
  error "Usage: usbguard_conky [usbguard log file] [hours to look back] [ignore list]

Pass an empty usbguard log file to read from the journal."
}

#on_list [element] [list]
#[list]: newline-separated list of strings
function on_list {
  local e="$1"
  local list="$2"

  local line=
  while IFS= read -r line ; do
    [[ "$line" == "$e" ]] && return 0
  done <<< "$list"

  return 1
}

log="$1"
hours="$2"
[ -n "$hours" ] || usage
ignore="$3"

if [ -z "$log" ] ; then
  input="$(journalctl -q -S "-${hours}h" -o "short-unix" "AUDIT_FIELD_EXE=/usr/sbin/usbguard-daemon")" || error "Failed to read the journal."
  input="$(echo "$input" | grep -E '^.*op="changed-authorization-state-for".*target="(block|reject)"')"

  #parse the hex device_rule stuff
  output=""
  re='^([0-9]+).* device_rule=([A-F0-9]+) ' #everything is encoded as hex in device_rule
  while IFS= read -r line ; do
    [ -z "$line" ] && continue
    [[ "$line" =~ $re ]] || error "Unexpected format: $line"
    match="$(xxd -r -p <<< ${BASH_REMATCH[2]})" || error "Hex parsing error: $line"
    output="$output"$'\n'"${BASH_REMATCH[1]} $match"
  done <<< "$input"
  input="$output"
else
  input="$(cat "$log")" || error "Failed to read $log."
  input="$(echo "$input" | grep -aE '^.*type='"'"'Policy.Device.Update'"'" | grep -E '^.*target.new='"'"'(block|reject)'"'")"
fi

now="$(date +%s)" || error "Failed to obtain the current time."

re='^\[?([0-9]+).* id ([^ ]+) .*name "([^"]*)".*$'
cnt=0
while IFS= read -r line ; do
  [ -z "$line" ] && continue
  #parse
  [[ "$line" =~ $re ]] || error "Not matching: $line"$'\n'"This is unexpected. Format change?"
  ts="${BASH_REMATCH[1]}"
  id="${BASH_REMATCH[2]}"
  name="${BASH_REMATCH[3]}"

  diff=$(( ( $now - $ts ) / 3600 ))
  if [ $diff -lt $hours ] && ! on_list "$id" "$ignore" ; then
    cnt=$(( cnt + 1 ))
    ts_readable="$(date "--date=@$ts" +'%F %H:%M:%S')" || error "Failed to convert $ts to a readable format."
    echo '${color red}'"$ts_readable $name ($id)"'${color}'
  fi
done <<< "$input"

if [ $cnt -eq 0 ] ; then
    echo '${color green}None${color}'
fi
exit 0
