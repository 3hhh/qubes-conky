#!/bin/bash
#
# List recently blocked dom0 USB devices for conky.
#
# If you use `usbguard, this can be used as such in your custom conky
# config (make sure the log file is readable by conky):
# ```
# ${execpi 60 ./usbguard_conky "/var/log/usbguard.log" 12}
# ```
#
# Copyright (C) 2022  David Hobach  GPLv3
# version: 0.9
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# 

function error {
  echo '${color red}ERROR: '"$1"'${color}'
  exit 1
}

function usage {
  error "Usage: usbguard_conky [usbguard log file] [hours to look back] [ignore list]"
}

#on_list [element] [list]
#[list]: newline-separated list of strings
function on_list {
  local e="$1"
  local list="$2"

  local line=
  while IFS= read -r line ; do
    [[ "$line" == "$e" ]] && return 0
  done <<< "$list"

  return 1
}

log="$1"
[ -n "$log" ] || usage
hours="$2"
[ -n "$hours" ] || usage
ignore="$3"

input="$(set -o pipefail ; grep -aE '^.*type='"'"'Policy.Device.Update'"'" "$log")" || error "Failed to get the input."
input="$(echo "$input" | grep -E '^.*target.new='"'"'(block|reject)'"'" | tail -n10)"
now="$(date +%s)" || error "Failed to obtain the current time."

re='^\[([0-9]+).* id ([^ ]+) .*name "([^"]*)".*$'
cnt=0
while IFS= read -r line ; do
  [ -z "$line" ] && continue
  #parse
  [[ "$line" =~ $re ]] || error "Not matching: $line"$'\n'"This is unexpected. Format change?"
  ts="${BASH_REMATCH[1]}"
  id="${BASH_REMATCH[2]}"
  name="${BASH_REMATCH[3]}"

  diff=$(( ( $now - $ts ) / 3600 ))
  if [ $diff -lt $hours ] && ! on_list "$id" "$ignore" ; then
    cnt=$(( cnt + 1 ))
    ts_readable="$(date "--date=@$ts" +'%F %H:%M:%S')" || error "Failed to convert $ts to a readable format."
    echo '${color red}'"$ts_readable $name ($id)"'${color}'
  fi
done <<< "$input"

if [ $cnt -eq 0 ] ; then
    echo '${color green}None${color}'
fi
exit 0
